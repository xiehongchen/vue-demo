{"version":3,"file":"index-BI_Yi6El.js","sources":["../../src/utils/axios/axiosCancel.ts","../../src/utils/axios/axiosRetry.ts","../../src/utils/axios/index.ts","../../src/utils/axios/checkStatus.ts","../../src/utils/axios/axios.ts"],"sourcesContent":["import { AxiosRequestConfig } from \"axios\"\n\n// 存储取消请求控制器\nconst pendingMap = new Map<string, AbortController>()\n\n// 请求唯一标识\nconst getUrl = (config: AxiosRequestConfig) => {\n  return [config.url, config.method].join(':')\n}\n\n/**\n * 取消请求类\n */\nclass AxiosCanceler {\n  /**\n   * 添加请求\n   * @param config 请求配置\n   */\n  addPending(config: AxiosRequestConfig) {\n    this.removePending(config)\n    const url = getUrl(config)\n    const abortController = new AbortController()\n    config.signal = abortController.signal\n    if (!pendingMap.has(url)) {\n      pendingMap.set(url, abortController)\n    }\n  }\n  /**\n   * 删除指定的请求\n   * @param config 请求配置\n   */\n  removePending(config: AxiosRequestConfig) {\n    const url = getUrl(config)\n    if (pendingMap.has(url)) {\n      const abortController = pendingMap.get(url)\n      abortController?.abort()\n      pendingMap.delete(url)\n    }\n  }\n  /**\n   * 清除所有等待中的请求\n   */\n  removeAllPending() {\n    pendingMap.forEach((abortController) => {\n      abortController.abort()\n    })\n    this.clear()\n  }\n  clear() {\n    pendingMap.clear()\n  }\n}\n\nexport default AxiosCanceler","import type { AxiosError, AxiosInstance } from \"axios\"\n\nclass AxiosRetry {\n  retry(axiosInstance: AxiosInstance, err: AxiosError) {\n    const config: any = err.config\n    console.log('config', config)\n    const { waitTime, count } = config.retryConfig ?? {}\n    config.currentCount = config.currentCount ?? 0\n    console.log(`第${config.currentCount}次重连`)\n    if (config.currentCount >= count) {\n      return Promise.reject(err)\n    }\n    config.currentCount++\n    return this.wait(waitTime).then(() => axiosInstance(config))\n  }\n  wait(waitTime: number) {\n    return new Promise(resolve => setTimeout(resolve, waitTime))\n  }\n}\n\nexport default AxiosRetry","import { RequstInterceptors } from './axiosType'\nimport type { AxiosError } from 'axios'\nimport axios from 'axios'\nimport AxiosTest from \"./axios\"\nimport AxiosRetry from './axiosRetry'\nimport { checkStatus } from './checkStatus'\nconst _RequstInterceptors: RequstInterceptors = {\n  // 请求拦截器\n  requestInterceptors(config) {\n    // console.log('stopRequest', stopRequest)\n    // const abortAxios = new AbortAxios()\n    // abortAxios.addPending(config)\n    return config\n  },\n  // 请求错误拦截器\n  requestInterceptorsCatch(err) {\n    return err\n  },\n  // 响应拦截器\n  responseInterceptor(config) {\n    return config\n  },\n  // 响应错误拦截器\n  responseInterceptorsCatch(axiosInstance, err: AxiosError) {\n    let message = err.code === 'ECONNABORTED' ? '请求超时' : undefined\n    if (axios.isCancel(err)) {\n      return Promise.reject(err);\n    }\n    console.log(err)\n    checkStatus((err as AxiosError).response?.status, message,  (message) => console.log(message))\n    const retryRequest = new AxiosRetry();\n\n    return retryRequest.retry(axiosInstance, err as AxiosError)\n  },\n}\n\nconst useRequest = new AxiosTest({\n  directlyGetData: false,\n  baseURL: '/api',\n  timeout: 3000,\n  interceptors: _RequstInterceptors,\n  abortRepetitiveRequest: true,\n  retryConfig: {\n    count: 1,\n    waitTime: 500\n  }\n})\n\nexport default useRequest","export function checkStatus(\n  status: number | undefined, \n  message: string | undefined, \n  callback: (errorMessage: string) => any\n) {\n  let errorMessage = message ?? ''\n  switch (status) {\n    case 400:\n      errorMessage = '客户端错误，请求格式或参数有误！'\n      break\n    case 401:\n      errorMessage = '身份认证不通过'\n      break\n    case 403:\n      errorMessage = '用户得到授权，但是访问是被禁止的!'\n      break\n    case 404:\n      errorMessage = '未找到目标资源!'\n      break\n    case 500:\n      errorMessage = '服务器错误!'\n      break\n    case 503:\n      errorMessage = '服务器错误！'\n      break\n  }\n  if (errorMessage.length > 0) {\n    callback(`checkStatus: ${errorMessage}`)\n  }\n}","import type { AxiosOptions, RequstInterceptors } from './axiosType'\nimport type { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, InternalAxiosRequestConfig } from 'axios'\nimport axios from 'axios'\nimport AxiosCanceler from './axiosCancel'\n\nclass AxiosTest {\n  // axios实例, 通过axios.create()方法创建\n  private axiosInstance: AxiosInstance\n  // 传入的配置\n  private options: AxiosOptions\n  // 拦截器\n  private interceptors: RequstInterceptors | undefined\n  constructor(options: AxiosOptions) {\n    this.axiosInstance = axios.create(options)\n    this.options = options\n    this.interceptors = options.interceptors\n    // 对拦截器进行初始化注册\n    this.setInterceptors()\n  }\n\n  /**\n   * 注册拦截器方法\n   */\n  setInterceptors() {\n    // 如果配置中并没有传入拦截器，则直接返回\n    if (!this.interceptors) return\n\n    const {\n      requestInterceptors,\n      requestInterceptorsCatch,\n      responseInterceptor,\n      responseInterceptorsCatch\n    } = this.interceptors\n\n    // 创建取消请求实例\n    const abortAxios = new AxiosCanceler()\n\n    // 挂载请求拦截器\n    this.axiosInstance.interceptors.request.use((config: InternalAxiosRequestConfig) => {\n      // 是否清除重复请求\n      const abortRepetitiveRequest = (config as unknown as any)?.abortRepetitiveRequest ?? this.options.abortRepetitiveRequest\n      if (abortRepetitiveRequest) {\n        // 存储请求标识\n        abortAxios.addPending(config)\n      }\n      if (requestInterceptors) {\n        // 如果存在请求拦截器，则将 config 先交给 requestInterceptors 做对应的配置。\n        config = requestInterceptors(config)\n      }\n      return config\n    }, requestInterceptorsCatch ?? undefined)\n\n    // 挂载响应拦截器\n    this.axiosInstance.interceptors.response.use((res: AxiosResponse) => {\n      // 取消请求\n      res && abortAxios.removePending(res.config)\n\n      if (responseInterceptor) {\n        // 如果存在响应拦截器，则将返回值先交给 responseInterceptor 做处理\n        res = responseInterceptor(res)\n      }\n      // 根据 options.directlyGetData 配置选项判断是否直接取得data值\n      if (this.options.directlyGetData) {\n        res = res.data\n      }\n      return res\n    }, (err: AxiosError) => {\n      if (responseInterceptorsCatch) {\n        // 如果存在响应错误拦截器，则将返回值交给 responseInterceptorsCatch 做处理\n        return responseInterceptorsCatch(this.axiosInstance, err)\n      }\n      return err\n    })\n  }\n\n  /**\n   * 统一请求方法\n   */\n  request<T = any>(config: AxiosRequestConfig): Promise<ApiRes<T>> {\n    return new Promise((resolve, reject) => {\n      this.axiosInstance.request<T>(config).then((res: AxiosResponse) => {\n        return resolve(res.data)\n      }).catch((err: { message: string }) => {\n        return reject(err)\n      })\n    })\n  }\n\n  get<T = any>(config: AxiosRequestConfig): Promise<ApiRes<T>> {\n    return this.request<T>({ ...config, method: 'GET' })\n  }\n\n  post<T = any>(config: AxiosRequestConfig): Promise<ApiRes<T>> {\n    return this.request<T>({ ...config, method: 'POST' })\n  }\n\n  put<T = any>(config: AxiosRequestConfig): Promise<ApiRes<T>> {\n    return this.request<T>({ ...config, method: 'PUT' })\n  }\n\n  delete<T = any>(config: AxiosRequestConfig): Promise<ApiRes<T>> {\n    return this.request<T>({ ...config, method: 'DELETE' })\n  }\n}\n\nexport default AxiosTest"],"names":["pendingMap","Map","getUrl","config","url","method","join","AxiosCanceler","addPending","this","removePending","abortController","AbortController","signal","has","set","get","abort","delete","removeAllPending","forEach","clear","AxiosRetry","retry","axiosInstance","err","waitTime","count","retryConfig","currentCount","Promise","reject","wait","then","resolve","setTimeout","_RequstInterceptors","requestInterceptors","requestInterceptorsCatch","responseInterceptor","responseInterceptorsCatch","message","code","axios","isCancel","status","callback","errorMessage","length","checkStatus","_a","response","useRequest","constructor","options","__publicField","create","interceptors","setInterceptors","abortAxios","request","use","abortRepetitiveRequest","res","directlyGetData","data","catch","post","put","baseURL","timeout"],"mappings":"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"}