{"version":3,"file":"table2-BamzOGgo.js","sources":["../../src/utils/utils.ts","../../src/components/BasicTable/ActionButton.vue","../../src/components/BasicTable/index.vue","../../src/views/table2.vue"],"sourcesContent":["const isArray = Array.isArray;\r\nconst isMap = (val: any) => toTypeString(val) === \"[object Map]\";\r\nconst isSet = (val: any) => toTypeString(val) === \"[object Set]\";\r\nconst isDate = (val: any) => toTypeString(val) === \"[object Date]\";\r\nconst isRegExp = (val: any) => toTypeString(val) === \"[object RegExp]\";\r\nconst isFunction = (val: any) => typeof val === \"function\";\r\nconst isString = (val: any) => typeof val === \"string\";\r\nconst isSymbol = (val: any) => typeof val === \"symbol\";\r\nconst isObject = (val: any) => val !== null && typeof val === \"object\";\r\nconst isPromise = (val: any) => {\r\n  return (isObject(val) || isFunction(val)) && isFunction(val.then) && isFunction(val.catch);\r\n};\r\nconst objectToString = Object.prototype.toString;\r\nconst toTypeString = (value: any) => objectToString.call(value);\r\n\r\n\r\nexport {\r\n  isArray,\r\n  isMap,\r\n  isSet,\r\n  isDate,\r\n  isRegExp,\r\n  isFunction,\r\n  isString,\r\n  isSymbol,\r\n  isObject,\r\n  isPromise,\r\n  toTypeString,\r\n};","<template>\r\n  <el-popconfirm v-if=\"confirmProps\" v-bind=\"confirmProps\" @confirm=\"handleConfirm(button, props.scope)\">\r\n      <template #reference>\r\n          <el-button v-bind=\"buttonProps\">\r\n              {{ computedActionName(button, props.scope.row) }}\r\n          </el-button>\r\n      </template>\r\n  </el-popconfirm>\r\n  <el-button v-else v-bind=\"buttonProps\" @click=\"handleConfirm(button, props.scope)\">\r\n      {{ computedActionName(button, props.scope.row) }}\r\n  </el-button>\r\n</template>\r\n<script setup lang=\"ts\">\r\nimport { Action, TColumn } from \"./TableColumns\";\r\nimport { isFunction, isString, isObject } from \"@/utils/utils\";\r\n\r\nconst props = withDefaults(\r\n  defineProps<{ button: Action; scope: { row: any; col: any; $index: number } }>(),\r\n  {}\r\n);\r\n\r\nconst buttonProps = computed(() => {\r\n  let customeProps: any = props.button.props || {};\r\n\r\n  return Object.assign(\r\n      {\r\n          marginRight: \"10px\",\r\n          type: \"primary\",\r\n          size: \"small\",\r\n      },\r\n      isFunction(customeProps) ? customeProps(props.scope.row) : customeProps\r\n  );\r\n});\r\n\r\n// 气泡确认框\r\nconst confirmProps = computed(() => {\r\n  const propsConfirm: any = props.button.confirm;\r\n  if (propsConfirm === undefined) {\r\n      return false;\r\n  }\r\n\r\n  if (!isString(propsConfirm) && !isObject(propsConfirm) && !isFunction(propsConfirm)) {\r\n      console.error(\"confirmProps 类型错误\");\r\n      return {};\r\n  }\r\n\r\n  if (isString(propsConfirm)) {\r\n      return {\r\n          title: propsConfirm,\r\n      };\r\n  }\r\n\r\n  if (isFunction(propsConfirm)) {\r\n      const res = propsConfirm(props.scope.row);\r\n      if (isObject(res)) {\r\n          return res;\r\n      }\r\n      if (isString(res)) {\r\n          return {\r\n              title: res,\r\n          };\r\n      }\r\n  }\r\n\r\n  if (isObject(propsConfirm) && propsConfirm.title !== undefined) {\r\n      return isFunction(propsConfirm.title)\r\n          ? {\r\n              ...propsConfirm,\r\n              title: propsConfirm.title(props.scope.row),\r\n          }\r\n          : propsConfirm;\r\n  }\r\n  console.error(\"confirmProps 类型错误\");\r\n});\r\n\r\nconst emits = defineEmits([\"click\"]);\r\n\r\nconst handleConfirm = (button: { click: any; }, _scope: any) => {\r\n  if (isFunction(button.click)) {\r\n      emits(\"click\");\r\n  }\r\n};\r\n\r\nconst computedActionName = (button: Action, row: TColumn) => {\r\n  return !isFunction(button.text)\r\n      ? button.text\r\n      : computed(() => button.text(row)).value?.replace(/\\\"/g, \"\");\r\n};\r\n</script>\r\n","<template>\r\n  <el-table ref=\"tableRef\" :data=\"options.data\" v-loading=\"loading\" \r\n    v-on=\"Object.assign({}, $attrs.events)\" v-bind=\"Object.assign({}, $attrs.props)\">\r\n    <template v-for=\"column in options.columns\">\r\n      <!-- 操作 -->\r\n      <el-table-column v-if=\"column.prop === 'action'\" v-bind=\"column\">\r\n        <template v-for=\"button in column.actions\" v-bind=\"column\" #default=\"scope\">\r\n          <action-button :button=\"button\" :scope=\"scope\" @click=\"() => button.click(scope, tableRef)\"></action-button>\r\n        </template>\r\n      </el-table-column>\r\n      <!-- 有点击事件 -->\r\n      <el-table-column v-else-if=\"isFunction(column.click)\" v-bind=\"column\">\r\n        <template #default=\"{ row, col, index }\">\r\n          <el-button v-bind=\"Object.assign({}, column.props || {})\" @click=\"column.click(row, col, index)\">\r\n            {{ isFunction(column.text) ? column.text(row, col, index) : column.text }}\r\n          </el-button>\r\n        </template>\r\n      </el-table-column>\r\n      <!-- 有插槽 -->\r\n      <el-table-column v-else-if=\"column.slot\" v-bind=\"column\">\r\n        <template #default=\"{ row, col, $index }\">\r\n          <slot :name=\"column.slot\" :row=\"row\" :col=\"col\" :index=\"$index\" :key=\"$index\"></slot>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column v-else v-bind=\"column\"></el-table-column>\r\n    </template>\r\n\r\n  </el-table>\r\n</template>\r\n\r\n<script setup lang='ts'>\r\nimport { isFunction } from '@/utils/utils';\r\n\r\ndefineProps({\r\n  options: {\r\n    type: Object,\r\n    required: true\r\n  },\r\n  loading: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n})\r\nconst tableRef = ref()\r\ndefineExpose({\r\n  tableRef\r\n})\r\n</script>\r\n\r\n<style scoped lang='scss'>\r\n\r\n</style>","<template>\n  <div>\n    <h1>表格二次封装</h1>\n    <basic-table :options=\"options\" :loading=\"loading\" :props=\"options.props\" :events=\"options.events\"></basic-table>\n    <el-pagination\n      background \n      layout=\"prev, pager, next\" \n      :total=\"pagination.total\" \n      v-model:page-size=\"pagination.pageSize\"\n      v-model:current-page=\"pagination.current\"\n      @current-change=\"changeCurrent\"\n      @size-change=\"changePageSize\" />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { getPersonList } from '@/apis'\nimport useTable from '@/hooks/useTable'\nimport { reactive } from 'vue';\n\nconst form = reactive({\n  name: '',\n  status: ''\n})\nconst { loading, tableData, pagination, changeCurrent, changePageSize } = useTable(\n  (pagin) => getPersonList({ ...form, current: pagin.page, pageSize: pagin.size }),\n  { immediate: true, formatResult: (data: any[]) => data.map((i) => ({ ...i, isEdit: false })) }\n)\n\nconst formData = (data: any) => {\n  return data.slice(0, 4)\n}\n\n// 表格配置\nconst options = reactive({\n  props: {\n    border: true,\n    stripe: true\n  },\n  events: {},\n  // 表格数据\n  data: tableData,\n  // 表格列\n  columns: [\n    { \n      prop: 'name', \n      label: '姓名',\n      text: '查看姓名',\n      click: (row: any) => {\n        console.log('row', row)\n      }\n    },\n    {\n      prop: 'startTime',\n      label: '开始时间',\n      formatter: (row: any) => formData(row.startTime),\n    },\n    { prop: 'date', label: '日期' },\n    { prop: 'address', label: '地址' },\n    {\n      label: '操作',\n      prop: 'action',\n      actions: [\n        { text: '编辑' },\n        { text: '删除' },\n        {\n          text: '查看',\n          click: ({ row }: any, table: any) => {\n            console.log('row', row)\n            console.log('table', table)\n          }\n        }\n      ]\n    }\n  ]\n})\n\n</script>\n\n<style lang=\"scss\" scoped>\n.el-pagination {\n  display: flex;\n  justify-content: flex-end;\n}\n</style>"],"names":["isFunction","val","isString","isObject","props","__props","buttonProps","computed","customeProps","button","Object","assign","marginRight","type","size","scope","row","confirmProps","propsConfirm","confirm","title","res","emits","__emit","handleConfirm","_scope","click","computedActionName","text","_a","value","replace","tableRef","ref","__expose","form","reactive","name","status","loading","tableData","pagination","changeCurrent","changePageSize","useTable","pagin","getPersonList","current","page","pageSize","immediate","formatResult","data","map","i","isEdit","options","border","stripe","events","columns","prop","label","formatter","startTime","slice","actions","table"],"mappings":"oWAKA,MAAMA,EAAcC,GAA4B,mBAARA,EAClCC,EAAYD,GAA4B,iBAARA,EAEhCE,EAAYF,GAAqB,OAARA,GAA+B,iBAARA,0FCQtD,MAAMG,EAAQC,EAKRC,EAAcC,GAAS,KAC3B,IAAIC,EAAoBJ,EAAMK,OAAOL,OAAS,CAAA,EAE9C,OAAOM,OAAOC,OACV,CACIC,YAAa,OACbC,KAAM,UACNC,KAAM,SAEVd,EAAWQ,GAAgBA,EAAaJ,EAAMW,MAAMC,KAAOR,EAAA,IAK3DS,EAAeV,GAAS,KACtB,MAAAW,EAAoBd,EAAMK,OAAOU,QACvC,QAAqB,IAAjBD,EACO,OAAA,EAGP,IAAChB,EAASgB,KAAkBf,EAASe,KAAkBlB,EAAWkB,GAElE,MAAO,GAGP,GAAAhB,EAASgB,GACF,MAAA,CACHE,MAAOF,GAIX,GAAAlB,EAAWkB,GAAe,CAC1B,MAAMG,EAAMH,EAAad,EAAMW,MAAMC,KACjC,GAAAb,EAASkB,GACF,OAAAA,EAEP,GAAAnB,EAASmB,GACF,MAAA,CACHD,MAAOC,EAGnB,CAEA,OAAIlB,EAASe,SAAwC,IAAvBA,EAAaE,MAChCpB,EAAWkB,EAAaE,OACzB,IACKF,EACHE,MAAOF,EAAaE,MAAMhB,EAAMW,MAAMC,MAExCE,OANV,CAQiC,IAG7BI,EAAQC,EAERC,EAAgB,CAACf,EAAyBgB,KAC1CzB,EAAWS,EAAOiB,QAClBJ,EAAM,QACV,EAGIK,EAAqB,CAAClB,EAAgBO,WAC1C,OAAQhB,EAAWS,EAAOmB,MAEpB,OAAAC,EAAAtB,GAAS,IAAME,EAAOmB,KAAKZ,KAAMc,YAAjC,EAAAD,EAAwCE,QAAQ,MAAO,IADvDtB,EAAOmB,IACgD,4dC3C/D,MAAMI,EAAWC,WACJC,EAAA,CACXF,qgCCzBF,MAAMG,EAAOC,EAAS,CACpBC,KAAM,GACNC,OAAQ,MAEJC,QAAEA,EAASC,UAAAA,EAAAC,WAAWA,EAAYC,cAAAA,EAAAC,eAAeA,GAAmBC,GACvEC,GAAUC,EAAc,IAAKX,EAAMY,QAASF,EAAMG,KAAMC,SAAUJ,EAAM/B,QACzE,CAAEoC,WAAW,EAAMC,aAAeC,GAAgBA,EAAKC,KAAKC,IAAA,IAAYA,EAAGC,QAAQ,QAQ/EC,EAAUpB,EAAS,CACvBhC,MAAO,CACLqD,QAAQ,EACRC,QAAQ,GAEVC,OAAQ,CAAC,EAETP,KAAMZ,EAENoB,QAAS,CACP,CACEC,KAAM,OACNC,MAAO,KACPlC,KAAM,OACNF,MAAQV,IACgB,GAG1B,CACE6C,KAAM,YACNC,MAAO,OACPC,UAAY/C,GAAsBA,EAAIgD,UAzB9BC,MAAM,EAAG,IA2BnB,CAAEJ,KAAM,OAAQC,MAAO,MACvB,CAAED,KAAM,UAAWC,MAAO,MAC1B,CACEA,MAAO,KACPD,KAAM,SACNK,QAAS,CACP,CAAEtC,KAAM,MACR,CAAEA,KAAM,MACR,CACEA,KAAM,KACNF,MAAO,EAAGV,OAAYmD,KAEM"}